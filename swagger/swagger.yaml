basePath: /api
definitions:
  dto.CharacterResponse:
    properties:
      id:
        example: char_001
        type: string
      image_url:
        example: https://example.com/characters/advisor.png
        type: string
      name:
        example: Character Name
        type: string
    type: object
  dto.CreateGoalRequest:
    properties:
      period:
        example: 30
        type: integer
      target_amount:
        example: 10000
        type: integer
    required:
    - period
    - target_amount
    type: object
  dto.CreateOpportunityRequest:
    properties:
      description:
        example: Investment in stock market is a good way to make money
        type: string
      duration:
        example: a month
        type: string
      is_increase:
        example: true
        type: boolean
      min_amount:
        example: 1000
        type: integer
      tags:
        example:
        - high risk
        - long term
        items:
          type: string
        type: array
      title:
        example: Real Estate
        type: string
      variation:
        example: 20
        type: integer
    required:
    - description
    - duration
    - is_increase
    - min_amount
    - tags
    - title
    - variation
    type: object
  dto.CreateOpportunityResponse:
    properties:
      opportunity:
        $ref: '#/definitions/dto.OpportunityResponse'
    type: object
  dto.CreateTransactionRequest:
    properties:
      amount:
        example: 1000
        type: integer
      category:
        example: Food
        type: string
      date:
        example: "2023-01-01"
        type: string
      description:
        example: Lunch
        type: string
      transaction_type:
        example: Expense
        type: string
    required:
    - amount
    - category
    - date
    - description
    - transaction_type
    type: object
  dto.CreateUserInvestmentRequest:
    properties:
      amount:
        example: 1000
        type: integer
      opportunity_id:
        example: 60d6ec33f777b123e4567890
        type: string
    required:
    - amount
    - opportunity_id
    type: object
  dto.CreateUserInvestmentResponse:
    properties:
      investment:
        $ref: '#/definitions/dto.InvestmentResponse'
    type: object
  dto.DrawGachaRequest:
    properties:
      amount:
        example: 100
        type: integer
    required:
    - amount
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  dto.GachaResponse:
    properties:
      id:
        example: 60d6ec33f777b123e4567890
        type: string
      img_src:
        example: https://example.com/image.png
        type: string
    type: object
  dto.GetGoalResponse:
    properties:
      goal:
        $ref: '#/definitions/dto.GoalResponse'
    type: object
  dto.GetOpportunitiesResponse:
    properties:
      opportunities:
        items:
          $ref: '#/definitions/dto.OpportunityResponse'
        type: array
    type: object
  dto.GetTransactionsResponse:
    properties:
      transactions:
        items:
          $ref: '#/definitions/dto.TransactionResponse'
        type: array
    type: object
  dto.GetUserInvestmentsResponse:
    properties:
      investments:
        items:
          $ref: '#/definitions/dto.InvestmentResponse'
        type: array
    type: object
  dto.GetUserResponse:
    properties:
      character:
        $ref: '#/definitions/dto.CharacterResponse'
      created_at:
        example: "2025-03-07T12:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 60d6ec33f777b123e4567890
        type: string
      name:
        example: User Name
        type: string
      updated_at:
        example: "2025-03-07T12:00:00Z"
        type: string
      wallet:
        $ref: '#/definitions/dto.WalletResponse'
    type: object
  dto.GoalResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      current_amount:
        example: 5000
        type: integer
      period:
        example: 30
        type: integer
      status:
        example: Need to work harder
        type: string
      target_amount:
        example: 10000
        type: integer
      updated_at:
        example: "2023-06-01T00:00:00Z"
        type: string
    type: object
  dto.GoalSuggestionRequest:
    properties:
      daily_expenses:
        example: 1000
        type: integer
      daily_income:
        example: 2000
        type: integer
      monthly_expenses:
        example: 30000
        type: integer
      monthly_income:
        example: 50000
        type: integer
      weekly_expenses:
        example: 7000
        type: integer
      weekly_income:
        example: 14000
        type: integer
    required:
    - daily_expenses
    - daily_income
    - monthly_expenses
    - monthly_income
    - weekly_expenses
    - weekly_income
    type: object
  dto.GoalSuggestionResponse:
    properties:
      message:
        example: Based on your income and expense analysis, we recommend that you
          can save 15,000 yuan per month.
        type: string
      period:
        example: 30
        type: integer
      suggested_amount:
        example: 15000
        type: integer
    type: object
  dto.InvestmentResponse:
    properties:
      amount:
        example: 1000
        type: integer
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      opportunity_id:
        example: 60d6ec33f777b123e4567890
        type: string
      updated_at:
        example: "2023-06-01T00:00:00Z"
        type: string
    type: object
  dto.LoginRequest:
    properties:
      firebase_token:
        example: eyJhbGciOiJSUzI1NiIsImtpZCI6I...
        type: string
    required:
    - firebase_token
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        type: string
      token_type:
        example: Bearer
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.LogoutRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        type: string
    required:
    - refresh_token
    type: object
  dto.LogoutResponse:
    properties:
      message:
        example: Successfully logged out
        type: string
      success:
        example: true
        type: boolean
    type: object
  dto.OpportunityResponse:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      description:
        example: Investment in stock market is a good way to make money
        type: string
      duration:
        example: a month
        type: string
      is_increase:
        example: true
        type: boolean
      min_amount:
        example: 1000
        type: integer
      opportunity_id:
        example: 60d6ec33f777b123e4567890
        type: string
      tags:
        example:
        - high risk
        - long term
        items:
          type: string
        type: array
      title:
        example: Real Estate
        type: string
      updated_at:
        example: "2023-06-01T00:00:00Z"
        type: string
      variation:
        example: 20
        type: integer
    type: object
  dto.PreviewGachasResponse:
    properties:
      gachas:
        items:
          $ref: '#/definitions/dto.GachaResponse'
        type: array
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        type: string
    required:
    - refresh_token
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  dto.ReportResponse:
    properties:
      amounts:
        example:
        - 1000
        - 2000
        items:
          type: integer
        type: array
      categories:
        example:
        - Food
        - Transport
        items:
          type: string
        type: array
      expenses:
        example: 5000
        type: integer
      net_profit:
        example: 5000
        type: integer
      percentages:
        example:
        - 0.33
        - 0.67
        items:
          type: number
        type: array
      revenue:
        example: 10000
        type: integer
    required:
    - amounts
    - categories
    - expenses
    - net_profit
    - percentages
    - revenue
    type: object
  dto.ReportSummaryResponse:
    properties:
      summary:
        example: Report generated by AI
        type: string
    type: object
  dto.TransactionResponse:
    properties:
      amount:
        example: 1000
        type: integer
      category:
        example: Food
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      date:
        example: "2023-01-01"
        type: string
      description:
        example: Lunch
        type: string
      transaction_type:
        example: Expense
        type: string
      updated_at:
        example: "2023-06-01T00:00:00Z"
        type: string
    required:
    - amount
    - category
    - date
    - description
    - transaction_type
    type: object
  dto.UpdateUserRequest:
    properties:
      name:
        example: New User Name
        type: string
    required:
    - name
    type: object
  dto.UpdateUserResponse:
    properties:
      diamonds:
        example: 100
        type: integer
      email:
        example: user@example.com
        type: string
      id:
        example: 60d6ec33f777b123e4567890
        type: string
      name:
        example: New User Name
        type: string
      savings:
        example: 5000
        type: integer
      updated_at:
        example: "2025-03-07T12:00:00Z"
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2025-03-07T12:00:00Z"
        type: string
      diamonds:
        example: 100
        type: integer
      email:
        example: user@example.com
        type: string
      id:
        example: 60d6ec33f777b123e4567890
        type: string
      name:
        example: User Name
        type: string
    type: object
  dto.WalletResponse:
    properties:
      diamonds:
        example: 100
        type: integer
      savings:
        example: 5000
        type: integer
    type: object
info:
  contact: {}
  description: API for the Financial Partner application
  title: Financial Partner API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with Firebase, get Access Token and Refresh Token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successfully
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login with Firebase
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate the current Refresh Token
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successfully
          schema:
            $ref: '#/definitions/dto.LogoutResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Use Refresh Token to get a new Access Token
      parameters:
      - description: Token refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successfully
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh Access Token
      tags:
      - auth
  /gacha/draw:
    post:
      consumes:
      - application/json
      description: Decrease user's gacha amount and return gacha result
      parameters:
      - description: Draw gacha request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DrawGachaRequest'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GachaResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Decrease user's gacha amount and return gacha result
      tags:
      - gacha
  /gacha/preview:
    get:
      consumes:
      - application/json
      description: Get 9 gacha images for preview
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PreviewGachasResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get 9 gacha images for preview
      tags:
      - gacha
  /goals:
    get:
      consumes:
      - application/json
      description: Get user's current saving goal and status
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGoalResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get current saving goal
      tags:
      - goals
    post:
      consumes:
      - application/json
      description: Set user's saving goal amount and period
      parameters:
      - description: Create goal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGoalRequest'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GoalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create user's saving goal
      tags:
      - goals
  /goals/suggestion:
    post:
      consumes:
      - application/json
      description: Calculate and return suggested saving goals based on user's input
        expense data
      parameters:
      - description: Goal suggestion request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GoalSuggestionRequest'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GoalSuggestionResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Calculate and return suggested saving goals based on user's input expense
        data
      tags:
      - goals
  /goals/suggestion/me:
    get:
      consumes:
      - application/json
      description: Calculate and return suggested saving goals based on user's expense
        data
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GoalSuggestionResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Calculate and return suggested saving goals based on user's expense
        data
      tags:
      - goals
  /investments:
    get:
      consumes:
      - application/json
      description: Get investment opportunities for a user
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetOpportunitiesResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get investment opportunities
      tags:
      - investments
    post:
      consumes:
      - application/json
      description: Create an investment opportunity
      parameters:
      - description: Create opportunity request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOpportunityRequest'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateOpportunityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create an investment opportunity
      tags:
      - investments
  /reports/analysis:
    get:
      consumes:
      - application/json
      description: Get report summary generated by AI for a user
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReportSummaryResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get report summary
      tags:
      - reports
  /reports/finance:
    get:
      consumes:
      - application/json
      description: Get report for a user
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Type of report (summary or detailed)
        in: query
        name: type
        required: true
        type: string
      - description: Start time as Unix timestamp (seconds since epoch)
        in: query
        name: start
        type: integer
      - description: End time as Unix timestamp (seconds since epoch)
        in: query
        name: end
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get report
      tags:
      - reports
  /transactions:
    get:
      consumes:
      - application/json
      description: Get transactions for a user
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetTransactionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get transactions
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Create a transaction for user
      parameters:
      - description: Create transaction request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a transaction
      tags:
      - transactions
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the detailed information of the current user, with the option
        to return specific data fields
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - collectionFormat: multi
        description: Fields to include (profile, wallet, character). If not specified,
          returns all
        in: query
        items:
          type: string
        name: scope
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user information
          schema:
            $ref: '#/definitions/dto.GetUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetUser
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the current user's nickname
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update user successfully
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: UpdateUser
      tags:
      - users
  /users/me/investments:
    get:
      consumes:
      - application/json
      description: Get user investments
      parameters:
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserInvestmentsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get user investments
      tags:
      - investments
    post:
      consumes:
      - application/json
      description: Create investment for a user
      parameters:
      - description: Create user investment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInvestmentRequest'
      - description: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateUserInvestmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create user investment
      tags:
      - investments
swagger: "2.0"
