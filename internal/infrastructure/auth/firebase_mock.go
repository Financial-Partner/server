// Code generated by MockGen. DO NOT EDIT.
// Source: firebase.go
//
// Generated by this command:
//
//	mockgen -source=firebase.go -destination=firebase_mock.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFirebaseAuth is a mock of FirebaseAuth interface.
type MockFirebaseAuth struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseAuthMockRecorder
	isgomock struct{}
}

// MockFirebaseAuthMockRecorder is the mock recorder for MockFirebaseAuth.
type MockFirebaseAuthMockRecorder struct {
	mock *MockFirebaseAuth
}

// NewMockFirebaseAuth creates a new mock instance.
func NewMockFirebaseAuth(ctrl *gomock.Controller) *MockFirebaseAuth {
	mock := &MockFirebaseAuth{ctrl: ctrl}
	mock.recorder = &MockFirebaseAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseAuth) EXPECT() *MockFirebaseAuthMockRecorder {
	return m.recorder
}

// VerifyIDToken mocks base method.
func (m *MockFirebaseAuth) VerifyIDToken(ctx context.Context, idToken string) (*Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, idToken)
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseAuthMockRecorder) VerifyIDToken(ctx, idToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebaseAuth)(nil).VerifyIDToken), ctx, idToken)
}
