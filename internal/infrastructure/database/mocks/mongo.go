// Code generated by MockGen. DO NOT EDIT.
// Source: mongo.go
//
// Generated by this command:
//
//	mockgen -source=mongo.go -destination=../mocks/mongo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
	readpref "go.mongodb.org/mongo-driver/mongo/readpref"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoClient is a mock of MongoClient interface.
type MockMongoClient struct {
	ctrl     *gomock.Controller
	recorder *MockMongoClientMockRecorder
	isgomock struct{}
}

// MockMongoClientMockRecorder is the mock recorder for MockMongoClient.
type MockMongoClientMockRecorder struct {
	mock *MockMongoClient
}

// NewMockMongoClient creates a new mock instance.
func NewMockMongoClient(ctrl *gomock.Controller) *MockMongoClient {
	mock := &MockMongoClient{ctrl: ctrl}
	mock.recorder = &MockMongoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoClient) EXPECT() *MockMongoClientMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockMongoClient) Database(name string, opts ...*options.DatabaseOptions) *mongo.Database {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockMongoClientMockRecorder) Database(name any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockMongoClient)(nil).Database), varargs...)
}

// Disconnect mocks base method.
func (m *MockMongoClient) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockMongoClientMockRecorder) Disconnect(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockMongoClient)(nil).Disconnect), ctx)
}

// Ping mocks base method.
func (m *MockMongoClient) Ping(ctx context.Context, rp *readpref.ReadPref) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, rp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMongoClientMockRecorder) Ping(ctx, rp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMongoClient)(nil).Ping), ctx, rp)
}
