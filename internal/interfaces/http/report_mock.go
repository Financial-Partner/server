// Code generated by MockGen. DO NOT EDIT.
// Source: report.go
//
// Generated by this command:
//
//	mockgen -source=report.go -destination=report_mock.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "github.com/Financial-Partner/server/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockReportService is a mock of ReportService interface.
type MockReportService struct {
	ctrl     *gomock.Controller
	recorder *MockReportServiceMockRecorder
	isgomock struct{}
}

// MockReportServiceMockRecorder is the mock recorder for MockReportService.
type MockReportServiceMockRecorder struct {
	mock *MockReportService
}

// NewMockReportService creates a new mock instance.
func NewMockReportService(ctrl *gomock.Controller) *MockReportService {
	mock := &MockReportService{ctrl: ctrl}
	mock.recorder = &MockReportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportService) EXPECT() *MockReportServiceMockRecorder {
	return m.recorder
}

// GetReport mocks base method.
func (m *MockReportService) GetReport(ctx context.Context, userID string, startTime, endTime time.Time, reportType string) (*entities.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, userID, startTime, endTime, reportType)
	ret0, _ := ret[0].(*entities.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockReportServiceMockRecorder) GetReport(ctx, userID, startTime, endTime, reportType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockReportService)(nil).GetReport), ctx, userID, startTime, endTime, reportType)
}

// GetReportSummary mocks base method.
func (m *MockReportService) GetReportSummary(ctx context.Context, userID string) (*entities.ReportSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportSummary", ctx, userID)
	ret0, _ := ret[0].(*entities.ReportSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportSummary indicates an expected call of GetReportSummary.
func (mr *MockReportServiceMockRecorder) GetReportSummary(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportSummary", reflect.TypeOf((*MockReportService)(nil).GetReportSummary), ctx, userID)
}
