// Code generated by MockGen. DO NOT EDIT.
// Source: gacha.go
//
// Generated by this command:
//
//	mockgen -source=gacha.go -destination=gacha_mock.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	entities "github.com/Financial-Partner/server/internal/entities"
	dto "github.com/Financial-Partner/server/internal/interfaces/http/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockGachaService is a mock of GachaService interface.
type MockGachaService struct {
	ctrl     *gomock.Controller
	recorder *MockGachaServiceMockRecorder
	isgomock struct{}
}

// MockGachaServiceMockRecorder is the mock recorder for MockGachaService.
type MockGachaServiceMockRecorder struct {
	mock *MockGachaService
}

// NewMockGachaService creates a new mock instance.
func NewMockGachaService(ctrl *gomock.Controller) *MockGachaService {
	mock := &MockGachaService{ctrl: ctrl}
	mock.recorder = &MockGachaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGachaService) EXPECT() *MockGachaServiceMockRecorder {
	return m.recorder
}

// DrawGacha mocks base method.
func (m *MockGachaService) DrawGacha(ctx context.Context, userID string, req *dto.DrawGachaRequest) (*entities.Gacha, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DrawGacha", ctx, userID, req)
	ret0, _ := ret[0].(*entities.Gacha)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DrawGacha indicates an expected call of DrawGacha.
func (mr *MockGachaServiceMockRecorder) DrawGacha(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawGacha", reflect.TypeOf((*MockGachaService)(nil).DrawGacha), ctx, userID, req)
}

// PreviewGachas mocks base method.
func (m *MockGachaService) PreviewGachas(ctx context.Context, userID string) ([]entities.Gacha, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewGachas", ctx, userID)
	ret0, _ := ret[0].([]entities.Gacha)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewGachas indicates an expected call of PreviewGachas.
func (mr *MockGachaServiceMockRecorder) PreviewGachas(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewGachas", reflect.TypeOf((*MockGachaService)(nil).PreviewGachas), ctx, userID)
}
