// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=auth_mock.go -package=middleware
//

// Package middleware is a generated GoMock package.
package middleware

import (
	reflect "reflect"

	auth "github.com/Financial-Partner/server/internal/infrastructure/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTValidator is a mock of JWTValidator interface.
type MockJWTValidator struct {
	ctrl     *gomock.Controller
	recorder *MockJWTValidatorMockRecorder
	isgomock struct{}
}

// MockJWTValidatorMockRecorder is the mock recorder for MockJWTValidator.
type MockJWTValidatorMockRecorder struct {
	mock *MockJWTValidator
}

// NewMockJWTValidator creates a new mock instance.
func NewMockJWTValidator(ctrl *gomock.Controller) *MockJWTValidator {
	mock := &MockJWTValidator{ctrl: ctrl}
	mock.recorder = &MockJWTValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTValidator) EXPECT() *MockJWTValidatorMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method.
func (m *MockJWTValidator) ValidateToken(tokenString string) (*auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJWTValidatorMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJWTValidator)(nil).ValidateToken), tokenString)
}
