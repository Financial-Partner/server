// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=interfaces_mock.go -package=auth_domain
//

// Package auth_domain is a generated GoMock package.
package auth_domain

import (
	context "context"
	reflect "reflect"
	time "time"

	auth "github.com/Financial-Partner/server/internal/infrastructure/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
	isgomock struct{}
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// DeleteRefreshToken mocks base method.
func (m *MockTokenStore) DeleteRefreshToken(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockTokenStoreMockRecorder) DeleteRefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockTokenStore)(nil).DeleteRefreshToken), ctx, refreshToken)
}

// GetRefreshToken mocks base method.
func (m *MockTokenStore) GetRefreshToken(ctx context.Context, refreshToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockTokenStoreMockRecorder) GetRefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockTokenStore)(nil).GetRefreshToken), ctx, refreshToken)
}

// SaveRefreshToken mocks base method.
func (m *MockTokenStore) SaveRefreshToken(ctx context.Context, id, refreshToken string, expiry time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", ctx, id, refreshToken, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockTokenStoreMockRecorder) SaveRefreshToken(ctx, id, refreshToken, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockTokenStore)(nil).SaveRefreshToken), ctx, id, refreshToken, expiry)
}

// MockFirebaseAuth is a mock of FirebaseAuth interface.
type MockFirebaseAuth struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseAuthMockRecorder
	isgomock struct{}
}

// MockFirebaseAuthMockRecorder is the mock recorder for MockFirebaseAuth.
type MockFirebaseAuthMockRecorder struct {
	mock *MockFirebaseAuth
}

// NewMockFirebaseAuth creates a new mock instance.
func NewMockFirebaseAuth(ctrl *gomock.Controller) *MockFirebaseAuth {
	mock := &MockFirebaseAuth{ctrl: ctrl}
	mock.recorder = &MockFirebaseAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseAuth) EXPECT() *MockFirebaseAuthMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockFirebaseAuth) VerifyToken(ctx context.Context, idToken string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, idToken)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockFirebaseAuthMockRecorder) VerifyToken(ctx, idToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockFirebaseAuth)(nil).VerifyToken), ctx, idToken)
}

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
	isgomock struct{}
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockJWTManager) GenerateAccessToken(id, email string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", id, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockJWTManagerMockRecorder) GenerateAccessToken(id, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockJWTManager)(nil).GenerateAccessToken), id, email)
}

// GenerateRefreshToken mocks base method.
func (m *MockJWTManager) GenerateRefreshToken(id, email string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", id, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockJWTManagerMockRecorder) GenerateRefreshToken(id, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockJWTManager)(nil).GenerateRefreshToken), id, email)
}

// ValidateToken mocks base method.
func (m *MockJWTManager) ValidateToken(tokenString string) (*auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockJWTManagerMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockJWTManager)(nil).ValidateToken), tokenString)
}
