// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=transaction_repository
//

// Package transaction_repository is a generated GoMock package.
package transaction_repository

import (
	context "context"
	reflect "reflect"

	entities "github.com/Financial-Partner/server/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, transaction *entities.Transaction) (*entities.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transaction)
	ret0, _ := ret[0].(*entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, transaction)
}

// FindByUserId mocks base method.
func (m *MockRepository) FindByUserId(ctx context.Context, userID string) ([]entities.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userID)
	ret0, _ := ret[0].([]entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockRepositoryMockRecorder) FindByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockRepository)(nil).FindByUserId), ctx, userID)
}

// MockTransactionStore is a mock of TransactionStore interface.
type MockTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStoreMockRecorder
	isgomock struct{}
}

// MockTransactionStoreMockRecorder is the mock recorder for MockTransactionStore.
type MockTransactionStoreMockRecorder struct {
	mock *MockTransactionStore
}

// NewMockTransactionStore creates a new mock instance.
func NewMockTransactionStore(ctrl *gomock.Controller) *MockTransactionStore {
	mock := &MockTransactionStore{ctrl: ctrl}
	mock.recorder = &MockTransactionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStore) EXPECT() *MockTransactionStoreMockRecorder {
	return m.recorder
}

// DeleteByUserId mocks base method.
func (m *MockTransactionStore) DeleteByUserId(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserId", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserId indicates an expected call of DeleteByUserId.
func (mr *MockTransactionStoreMockRecorder) DeleteByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserId", reflect.TypeOf((*MockTransactionStore)(nil).DeleteByUserId), ctx, userID)
}

// GetByUserId mocks base method.
func (m *MockTransactionStore) GetByUserId(ctx context.Context, userID string) ([]entities.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userID)
	ret0, _ := ret[0].([]entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockTransactionStoreMockRecorder) GetByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockTransactionStore)(nil).GetByUserId), ctx, userID)
}

// SetByUserId mocks base method.
func (m *MockTransactionStore) SetByUserId(ctx context.Context, userID string, transactions []entities.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetByUserId", ctx, userID, transactions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetByUserId indicates an expected call of SetByUserId.
func (mr *MockTransactionStoreMockRecorder) SetByUserId(ctx, userID, transactions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetByUserId", reflect.TypeOf((*MockTransactionStore)(nil).SetByUserId), ctx, userID, transactions)
}
