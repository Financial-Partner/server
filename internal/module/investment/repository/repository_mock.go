// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=investment_repository
//

// Package investment_repository is a generated GoMock package.
package investment_repository

import (
	context "context"
	reflect "reflect"

	entities "github.com/Financial-Partner/server/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateInvestment mocks base method.
func (m *MockRepository) CreateInvestment(ctx context.Context, entity *entities.Investment) (*entities.Investment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvestment", ctx, entity)
	ret0, _ := ret[0].(*entities.Investment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvestment indicates an expected call of CreateInvestment.
func (mr *MockRepositoryMockRecorder) CreateInvestment(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvestment", reflect.TypeOf((*MockRepository)(nil).CreateInvestment), ctx, entity)
}

// FindInvestmentsByUserId mocks base method.
func (m *MockRepository) FindInvestmentsByUserId(ctx context.Context, userID string) ([]entities.Investment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvestmentsByUserId", ctx, userID)
	ret0, _ := ret[0].([]entities.Investment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvestmentsByUserId indicates an expected call of FindInvestmentsByUserId.
func (mr *MockRepositoryMockRecorder) FindInvestmentsByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvestmentsByUserId", reflect.TypeOf((*MockRepository)(nil).FindInvestmentsByUserId), ctx, userID)
}

// FindOpportunitiesByUserId mocks base method.
func (m *MockRepository) FindOpportunitiesByUserId(ctx context.Context, userID string) ([]entities.Opportunity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOpportunitiesByUserId", ctx, userID)
	ret0, _ := ret[0].([]entities.Opportunity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOpportunitiesByUserId indicates an expected call of FindOpportunitiesByUserId.
func (mr *MockRepositoryMockRecorder) FindOpportunitiesByUserId(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOpportunitiesByUserId", reflect.TypeOf((*MockRepository)(nil).FindOpportunitiesByUserId), ctx, userID)
}

// MockInvestmentStore is a mock of InvestmentStore interface.
type MockInvestmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockInvestmentStoreMockRecorder
	isgomock struct{}
}

// MockInvestmentStoreMockRecorder is the mock recorder for MockInvestmentStore.
type MockInvestmentStoreMockRecorder struct {
	mock *MockInvestmentStore
}

// NewMockInvestmentStore creates a new mock instance.
func NewMockInvestmentStore(ctrl *gomock.Controller) *MockInvestmentStore {
	mock := &MockInvestmentStore{ctrl: ctrl}
	mock.recorder = &MockInvestmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvestmentStore) EXPECT() *MockInvestmentStoreMockRecorder {
	return m.recorder
}

// DeleteInvestments mocks base method.
func (m *MockInvestmentStore) DeleteInvestments(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvestments", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvestments indicates an expected call of DeleteInvestments.
func (mr *MockInvestmentStoreMockRecorder) DeleteInvestments(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvestments", reflect.TypeOf((*MockInvestmentStore)(nil).DeleteInvestments), ctx, userID)
}

// DeleteOpportunities mocks base method.
func (m *MockInvestmentStore) DeleteOpportunities(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOpportunities", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOpportunities indicates an expected call of DeleteOpportunities.
func (mr *MockInvestmentStoreMockRecorder) DeleteOpportunities(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOpportunities", reflect.TypeOf((*MockInvestmentStore)(nil).DeleteOpportunities), ctx, userID)
}

// GetInvestments mocks base method.
func (m *MockInvestmentStore) GetInvestments(ctx context.Context, userID string) ([]entities.Investment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestments", ctx, userID)
	ret0, _ := ret[0].([]entities.Investment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestments indicates an expected call of GetInvestments.
func (mr *MockInvestmentStoreMockRecorder) GetInvestments(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestments", reflect.TypeOf((*MockInvestmentStore)(nil).GetInvestments), ctx, userID)
}

// GetOpportunities mocks base method.
func (m *MockInvestmentStore) GetOpportunities(ctx context.Context, userID string) ([]entities.Opportunity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpportunities", ctx, userID)
	ret0, _ := ret[0].([]entities.Opportunity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpportunities indicates an expected call of GetOpportunities.
func (mr *MockInvestmentStoreMockRecorder) GetOpportunities(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpportunities", reflect.TypeOf((*MockInvestmentStore)(nil).GetOpportunities), ctx, userID)
}

// SetInvestments mocks base method.
func (m *MockInvestmentStore) SetInvestments(ctx context.Context, userID string, investments []entities.Investment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInvestments", ctx, userID, investments)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInvestments indicates an expected call of SetInvestments.
func (mr *MockInvestmentStoreMockRecorder) SetInvestments(ctx, userID, investments any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInvestments", reflect.TypeOf((*MockInvestmentStore)(nil).SetInvestments), ctx, userID, investments)
}

// SetOpportunities mocks base method.
func (m *MockInvestmentStore) SetOpportunities(ctx context.Context, userID string, opportunities []entities.Opportunity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOpportunities", ctx, userID, opportunities)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOpportunities indicates an expected call of SetOpportunities.
func (mr *MockInvestmentStoreMockRecorder) SetOpportunities(ctx, userID, opportunities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOpportunities", reflect.TypeOf((*MockInvestmentStore)(nil).SetOpportunities), ctx, userID, opportunities)
}
