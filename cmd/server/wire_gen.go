// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	_ "github.com/Financial-Partner/server/swagger"
)

// Injectors from wire.go:

func InitializeServer(cfgFile string) (*Server, error) {
	config, err := ProvideConfig(cfgFile)
	if err != nil {
		return nil, err
	}
	client, err := ProvideDBClient(config)
	if err != nil {
		return nil, err
	}
	repository := ProvideUserRepository(client)
	cacheClient, err := ProvideCacheClient(config)
	if err != nil {
		return nil, err
	}
	userStore := ProvideUserStore(cacheClient)
	logger := ProvideLogger()
	service := ProvideUserService(repository, userStore, logger)
	authClient, err := ProvideAuthClient(config)
	if err != nil {
		return nil, err
	}
	jwtManager := ProvideJWTManager(config)
	tokenStore := ProvideTokenStore(cacheClient)
	auth_usecaseService := ProvideAuthService(config, authClient, jwtManager, tokenStore, service)
	goal_usecaseService := ProvideGoalService()
	investment_usecaseService := ProvideInvestmentService()
	transaction_repositoryRepository := ProvideTransactionRepository(client)
	transactionStore := ProvideTransactionStore(cacheClient)
	transaction_usecaseService := ProvideTransactionService(transaction_repositoryRepository, transactionStore, logger)
	gacha_usecaseService := ProvideGachaService()
	report_usecaseService := ProvideReportService()
	handler := ProvideHandler(service, auth_usecaseService, goal_usecaseService, investment_usecaseService, transaction_usecaseService, gacha_usecaseService, report_usecaseService, logger)
	authMiddleware := ProvideAuthMiddleware(jwtManager, config, logger)
	loggerMiddleware := ProvideLoggerMiddleware(logger)
	router := ProvideRouter(handler, authMiddleware, loggerMiddleware, config)
	server := ProvideServer(router, config, logger)
	return server, nil
}
